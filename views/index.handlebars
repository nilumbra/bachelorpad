<!DOCTYPE html>
<html>
<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <!-- Bootstrap Core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="css/agency.css" rel="stylesheet">

    <!-- Custom Fonts -->
    <link href="font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
    <link href='https://fonts.googleapis.com/css?family=Kaushan+Script' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700' rel='stylesheet' type='text/css'>

    <script src="javascripts/howler.min.js" type="text/javascript"></script>
    <script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
    <script src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
    <script src="http://js.leapmotion.com/leap-0.6.4.js"></script>
    <script src="http://js.leapmotion.com/leap-plugins-0.1.8.js"></script>

    <!-- Google -->
    <link href='https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700' rel='stylesheet' type='text/css'>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>


    <!-- Load c3.css -->
    <link href="css/c3.min.css" rel="stylesheet" type="text/css">

    <!-- Load d3.js and c3.js-->
    <script src="js/d3.min.js" charset="utf-8"></script>
    <script src="js/c3.min.js"></script>

    <link href='themes/flatty.css' rel='stylesheet'>
    <script src='javascripts/humane.js'></script>

    <!-- Navigation -->
    <nav class="navbar navbar-default navbar-fixed-top">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header page-scroll">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand page-scroll" href="#page-top">Bachelor Pad</a>
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right">
                    <li class="hidden">
                        <a href="#page-top"></a>
                    </li>
                    <li>
                        <a class="page-scroll" href="#item1">About</a>
                    </li>
                    <li>
                        <a class="page-scroll" href="#item2">OurTeam</a>
                    </li>
                    <li>
                        <a class="page-scroll" href="javascript:toggleMusic()">Sound</a>
                    </li>

                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>

    <!-- Header -->
    <header>
        <div class="container">
            <div class="intro-text">
                <div class="intro-lead-in">FIND YOUR IDEAL</div>
                <div class="intro-lead-in">HOUSING</div>
                <div class="intro-lead-in">SIMPLY, ESAILY AND </div>
                <div class="intro-lead-in">BEAUTIFULLY.</div>

                <a href="#services" class="page-scroll btn btn-xl">explore</a>
            </div>
        </div>
    </header>




    <div id='cssmenu'>
        <ul>

            <li id='price_overlay'><a href="javascript:toggleMedianBounds()"><span>Price</span></a></li>
            <li id="traffic_overlay"><a href="javascript:toggleTrafficLayer()"><span>Traffic</span></a></li>
            <li id="bar_markers"><a href="javascript:toggleBarMarkers()"><span>Entertainment</span></a></li>
            <li id="shopping_markers"><a href="javascript:toggleShoppingMarkers()"><span>Shopping</span></a></li>
            <li><a><input id="min_field" type="text" placeholder="Min Range"></a></li>
            <li><a><input id="max_field" type="text" placeholder="Max Range"></a></li>
            <li><a href="javascript:callDatabase()"><span>Search</span></a></li>
        </ul>
    </div>

    <style type="text/css">
        #cssmenu
        {
            position: absolute;
            top: 1719px;
            left: 120px;
            z-index: 2;
        }

        #inputb
        {
            margin-top: 10px;
            margin-left: 10px;
            margin-right: 10px;
        }
    </style>




    <script>

        var ucsd = new google.maps.LatLng(32.880694,-117.236331);
        var NIGHT_MAPTYPE_ID = 'Night Map';
        var DAY_MAPTYPE_ID = 'Day Map';

        var nightSound = new Howl({
            urls: ['sounds/nightlife.ogg', 'sounds/nightlife.m4a'/*, 'sounds/nightlife.mp3'*/],
            autoplay: false,
            loop: true,
            volume: 0.2
        });
        var daySound = new Howl({
            urls: ['sounds/daytime.ogg', 'sounds/daytime.m4a'/*, 'sounds/daytime.mp3'*/],
            autoplay: false,
            loop: true,
            volume: 0.2
        });

        var barIcon = {
            scale: 1/8,
            url: 'images/Bars.png',
            size: new google.maps.Size(35, 35),
            origin: new google.maps.Point(0,0),
            anchor: new google.maps.Point(16, 16)
        };
        var marketIcon = {
            scale: 1/8,
            url: 'images/Store.png',
            size: new google.maps.Size(35, 35),
            origin: new google.maps.Point(0,0),
            anchor: new google.maps.Point(16, 16)
        };
        var houseIcon = {
            scale: 1/8,
            url: 'images/Houses.png',
            size: new google.maps.Size(35, 35),
            origin: new google.maps.Point(0,0),
            anchor: new google.maps.Point(16, 16)
        };

        var nightMapStyle = [
            {
                stylers: [
                    { hue: "#194C62" },
                    { saturation: -40 },
                    { invert_lightness: true}
                ]
            }
        ];


        var dayMapStyle = [
            {
               /* stylers: [
                    { hue: "#1765C62" },
                    { saturation: -40 },
                    { invert_lightness: true}
                ]*/
            }
        ];

        var testDayStyle = [
            {
                "featureType": "landscape",
                "elementType": "geometry.fill",
                "stylers": [
                    {"lightness": 80},
                    {"gamma": 4.41}
                ]
            }, {
                "elementType": "labels",
                "stylers": [
                    {"visibility": "off"}
                ]
            }, {
                "featureType": "road",
                "stylers": [
                    {"hue": "#2a00ff"},
                    {"saturation": 50},
                    {"lightness": -15}
                ]
            }, {
                "featureType": "road.highway",
                "stylers": [
                    {"hue": "#ff3300"},
                    {"visibility": "off"}
                ]
            }, {}
        ];


        var nightStyledMapOptions = {
            name: 'Night Style'
        };
        var dayStyledMapOptions = {
            name: 'Day Style'
        };

        var boundingCircle;
        var boundingCircleShowing = false;

        var mapOptions = {
            zoom: 12,
            center: ucsd,
            mapTypeControlOptions: {
                mapTypeIds: [
                    DAY_MAPTYPE_ID,
                    NIGHT_MAPTYPE_ID]
            },
            mapTypeId: NIGHT_MAPTYPE_ID
        };

        var nightMapType = new google.maps.StyledMapType(nightMapStyle, nightStyledMapOptions);
        var dayMapType = new google.maps.StyledMapType(testDayStyle, dayStyledMapOptions);


        var placeSearch, autocomplete;
        var map, trafficLayer;
        var layer = null;

        var geocoder;
        var rangeShowing = false;
        var citymap = {};
        var largeCircle;
        var medCircle;
        var smallCircle;

        var largeCircleRadius = (1609.34); //meters
        var medCircleRadius = (1609.34)*.5;
        var smallCircleRadius = (1609.34)*.25;

        var playSound = false;
        var eFunction;

        var showShoppingMarkers = true;
        var showBarMarkers = true;

        var dayRequest;
        var service;

        var barMarkerHash = {};
        var storeMarkerHash = {};
        var houseMarkerHash = {};

        var infowindow;

        var regionHash = null;
        var currentInfoWindow = new google.maps.InfoWindow();


        function initialize(){

            map = new google.maps.Map(document.getElementById("googleMap"), mapOptions);
            map.mapTypes.set(NIGHT_MAPTYPE_ID, nightMapType);
            map.mapTypes.set(DAY_MAPTYPE_ID, dayMapType);
            map.setMapTypeId(DAY_MAPTYPE_ID);
            service = new google.maps.places.PlacesService(map);
            infowindow = new google.maps.InfoWindow();
            geocoder = new google.maps.Geocoder();

            document.getElementById('price_overlay').className = 'inactive';
            document.getElementById('traffic_overlay').className = 'inactive';

            document.getElementById('shopping_markers').className = 'active';


            // Try HTML5 geolocation
            if(navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var pos = new google.maps.LatLng(position.coords.latitude,
                            position.coords.longitude);


                    map.setCenter(pos);
                }, function() {
                    handleNoGeolocation(true);
                });
            } else {
                // Browser doesn't support Geolocation
                handleNoGeolocation(false);
            }





            google.maps.event.addListener(map, 'maptypeid_changed', function() {

                eFunction = Math.pow(Math.E, (22-(map.getZoom())))+2;

                //console.log("map has changed to: "+eFunction);
                //daySound.pause();
                //nightSound.pause();

                if(map.getMapTypeId() == DAY_MAPTYPE_ID) {

                    //setAllMarkers(barMarkerHash, null);
                    showShoppingMarkers = true;
                    if(showShoppingMarkers) {
                        document.getElementById('shopping_markers').className = 'active';
                        setAllMarkers(storeMarkerHash, map);
                        showShoppingMarkers = true;
                    }
                    setAllMarkers(barMarkerHash, null);
                    showBarMarkers = false;
                    document.getElementById('bar_markers').className = 'inactive';
                    /*
                    if(showBarMarkers){
                        document.getElementById('bar_markers').className = 'active';
                    }
                    else{
                        setAllMarkers(storeMarkerHash, null);
                        document.getElementById('bar_markers').className = 'inactive';
                    }*/

                    nightSound.fade(0, 0, 1500, function() {
                        nightSound.pause();
                    });
                    if(playSound)
                        daySound.play();

                    dayRequest = {
                        location: map.getCenter(),
                        radius: eFunction,
                        types: ['grocery_or_supermarket']
                    };

                    service.nearbySearch(dayRequest, function (results, status) {

                        daySound.fade(0, 0.1 * results.length, 500);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            for (var i = 0; i < results.length; i++) {
                                createMarker(results[i], marketIcon);
                            }

                        }
                    });
                }
                else if(map.getMapTypeId() == NIGHT_MAPTYPE_ID) {

                    showBarMarkers = true;
                    if(showBarMarkers) {
                        document.getElementById('bar_markers').className = 'active';
                        setAllMarkers(barMarkerHash, map);
                    }

                    setAllMarkers(storeMarkerHash, null);
                    showShoppingMarkers = false;
                    document.getElementById('shopping_markers').className = 'inactive';
                    /*
                    if(showShoppingMarkers){
                        document.getElementById('shopping_markers').className = 'active';
                    }
                    else{
                        setAllMarkers(storeMarkerHash, null);
                        document.getElementById('shopping_markers').className = 'inactive';
                    }*/



                    daySound.fade(0, 0, 1500, function() {
                        daySound.pause();
                    });
                    if(playSound)
                        nightSound.play();

                    var nightRequest = {
                        location: map.getCenter(),
                        radius: eFunction,
                        types: ['bar', 'night_club']
                    };
                    service.nearbySearch(nightRequest, function (results, status) {
                        nightSound.fade(0, 0.05 * results.length, 500);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            for (var i = 0; i < results.length; i++) {
                                createMarker(results[i], barIcon);
                            }
                        }
                    });
                }

            });




            google.maps.event.addListener(map, 'center_changed', function() {
                var zoom = map.getZoom();
                if(zoom < 16)
                    zoom = 16;

                eFunction = Math.pow(Math.E, ((22-(zoom)))+1);

                if(map.getMapTypeId() == DAY_MAPTYPE_ID) { //daytime

                    dayRequest = {
                        location: map.getCenter(),
                        radius: (eFunction),
                        types: ['grocery_or_supermarket']
                    };

                    service.nearbySearch(dayRequest, function (results, status) {

                        if(results != null){
                            daySound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                        }
                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            for (var i = 0; i < results.length; i++) {
                                createMarker(results[i], marketIcon);
                            }
                        }

                    });
                }
                else { //nighttime

                    var nightRequest = {
                        location: map.getCenter(),
                        radius: eFunction,
                        types: ['bar', 'night_club']
                    };
                    var alcRequest = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['liquor_store']
                    };
                    service.nearbySearch(nightRequest, function (results, status) {

                        if(results != null){
                            nightSound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                        }

                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            if (status == google.maps.places.PlacesServiceStatus.OK) {
                                for (var i = 0; i < results.length; i++) {
                                    createMarker(results[i], barIcon);
                                }
                            }
                        }

                    });
                }


            });


            google.maps.event.addListener(map, 'click', function(event) {

                var lat = event.latLng.lat();
                var lng = event.latLng.lng();
                geocodePosition(event.latLng);
            });


            initializeMapSoundAndIcons();


        }


        function createMarker(place, icon) {

            //Save the marker to hash for use later
            if(icon == barIcon){
                if(barMarkerHash[place.id] != undefined){
                    return;
                }else{

                    var marker = new google.maps.Marker({
                        //map: map,
                        position: place.geometry.location,
                        animation: google.maps.Animation.DROP,
                        icon: icon
                    });

                    barMarkerHash[place.id] = marker;
                    if(showBarMarkers)
                        marker.setMap(map);
                }
            }

            else if(icon == marketIcon ){
                if(storeMarkerHash[place.id] != undefined){
                    return;
                }else{
                    var marker = new google.maps.Marker({
                        //map: map,
                        position: place.geometry.location,
                        animation: google.maps.Animation.DROP,
                        icon: icon
                    });

                    storeMarkerHash[place.id] = marker;
                    if(showShoppingMarkers)
                        marker.setMap(map);
                }
            }


            google.maps.event.addListener(marker, 'click', function() {
                currentInfoWindow.close();
                infowindow.setContent(place.name);
                infowindow.open(map, this);
                currentInfoWindow = infowindow;
            });

        }


        google.maps.event.addDomListener(window, 'load', initialize);

        function clearHouseMarkers(){

            setAllMarkers(houseMarkerHash, null);
            houseMarkerHash = {};
        }

        function toggleTrafficLayer(){

            if(trafficLayer == null){
                document.getElementById('traffic_overlay').className = 'active';
                trafficLayer = new google.maps.TrafficLayer();
                trafficLayer.setMap(map);
            }else{
                document.getElementById('traffic_overlay').className = 'inactive';
                trafficLayer.setMap(null);
                trafficLayer = null;
            }
        }

        function toggleBarMarkers(){

            if(showBarMarkers){
                document.getElementById('bar_markers').className = 'inactive';
                setAllMarkers(barMarkerHash, null);

            }else{
                document.getElementById('bar_markers').className = 'active';
                setAllMarkers(barMarkerHash, map);
            }
            showBarMarkers = !showBarMarkers;
        }

        function toggleShoppingMarkers(){

            if(showShoppingMarkers){
                document.getElementById('shopping_markers').className = 'inactive';
                setAllMarkers(storeMarkerHash, null);

            }else{
                document.getElementById('shopping_markers').className = 'active';
                setAllMarkers(storeMarkerHash, map);

            }

            showShoppingMarkers = !showShoppingMarkers;
        }


        function setAllMarkers(hash, map){
            Object.keys(hash).forEach(function (key) {
                //console.log(hash[key]);
                hash[key].setMap(map);
            })

        }


        function initializeMapSoundAndIcons(){
            //13
            eFunction = Math.pow(Math.E, (22-(map.getZoom())))+2;
            if(map.getMapTypeId() == DAY_MAPTYPE_ID) {

                dayRequest = {
                    location: map.getCenter(),
                    radius: (eFunction),
                    types: ['grocery_or_supermarket']
                };

                service.nearbySearch(dayRequest, function (results, status) {
                    if(playSound)
                        //daySound.fadeIn(0.05 * results.length, 1500);
                        daySound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                    else
                        daySound.volume(0);
                    if (status == google.maps.places.PlacesServiceStatus.OK) {
                        for (var i = 0; i < results.length; i++) {
                            createMarker(results[i], marketIcon);
                        }
                    }
                });
            }
            else { //nighttime

                var nightRequest = {
                    location: map.getCenter(),
                    radius: eFunction,
                    types: ['bar', 'night_club']
                };

                service.nearbySearch(nightRequest, function (results, status) {
                    if(playSound)
                        daySound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                    else
                        daySound.volume(0);
                    if (status == google.maps.places.PlacesServiceStatus.OK) {
                        for (var i = 0; i < results.length; i++) {
                            createMarker(results[i], barIcon);
                        }
                    }

                });
            }
        }


        /**
         * Show bounding Circle
         */
        function toggleBoundingCircle() {

            if (boundingCircle == null) {

                boundingCircle = new google.maps.Circle({
                    editable: true,
                    strokeColor: '#D32F2F',
                    strokeOpacity: 0.18,
                    strokeWeight: 2,
                    fillColor: '#D32F2F',
                    fillOpacity: 0.2,
                    radius: 1000,
                    center: map.getCenter()
                });
            }
            if (boundingCircleShowing){ //Hide

                console.log("CenterLoc:" +boundingCircle.getCenter())
                boundingCircle.setMap(null);
                var showCircleOptions = {
                    editable: false,
                    strokeColor: '#D32F2F',
                    strokeOpacity: 0,
                    fillColor: '#D32F2F',
                    fillOpacity: 0,
                    map: map,
                    center: boundingCircle.getCenter(),
                    radius: boundingCircle.radius
                };

                boundingCircle = new google.maps.Circle(showCircleOptions);
            }
            else{ //Show

                var showCircleOptions = {
                    editable: true,
                    strokeColor: '#D32F2F',
                    strokeOpacity: 0.18,
                    strokeWeight: 2,
                    fillColor: '#D32F2F',
                    fillOpacity: 0.2,
                    map: map,
                    center: boundingCircle.getCenter(),
                    radius: boundingCircle.radius
                };

                boundingCircle = new google.maps.Circle(showCircleOptions);
            }

            boundingCircleShowing = !boundingCircleShowing;
        }


        /**
         * AutoComplete locator
         *
         * */
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = new google.maps.LatLng(
                            position.coords.latitude, position.coords.longitude);
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }



        function geocodePosition(pos) {
            geocoder.geocode({
                latLng: pos
            }, function(responses) {
                if (responses && responses.length > 0) {
                    //console.log(responses[0].formatted_address); //TODO do some action
                    getZillowId(responses[0].formatted_address);
                } else {
                    console.log('Cannot determine address at this location.'); //TODO give dialog?
                    humane.log("Error getting location", {timeout: 1000, clickToClose: true });
                }
            });
        }

        function getZillowId(address) {
            $.ajax({
                type: "GET",
                url: '/getDeepSearchResults',
                data: {address: address},
                success: function(result) {
                    console.log("Success: "+JSON.stringify(result));
                    if(result == "error getting location"){

                        humane.log("Error getting location", {timeout: 1000, clickToClose: true });

                    }
                    else {

                        var latitude = result.results[0].result[0].address[0].latitude[0];
                        var longitude = result.results[0].result[0].address[0].longitude[0];
                        console.log("latitude " + JSON.stringify(result.results[0].result[0].address[0].latitude[0]));
                        console.log("longitude " + JSON.stringify(result.results[0].result[0].address[0].longitude[0]));


                        var marker = new google.maps.Marker({
                            map: map,
                            position: new google.maps.LatLng(latitude, longitude),
                            animation: google.maps.Animation.DROP,
                            icon: houseIcon
                        });
                        houseMarkerHash[result.results[0].result[0].zpid[0]] = marker;


                        console.log(result.results[0].result[0].zpid[0]);

                        var bathrooms = 1;
                        if (result.results[0].result[0].bathrooms != null)
                            bathrooms = result.results[0].result[0].bathrooms[0];

                        var bedrooms = 1;
                        if (result.results[0].result[0].bedrooms != null)
                            bedrooms = result.results[0].result[0].bedrooms[0];

                        var squareFeet = result.results[0].result[0].finishedSqFt[0];

                        var zestimate = "$" + result.results[0].result[0].zestimate[0].amount[0]._;

                        if (result.results[0].result[0].hasOwnProperty(lastSoldPrice))
                            var lastSoldPrice = "$" + result.results[0].result[0].lastSoldPrice[0]._;

                        //console.log("TESTINGS: "+lotSize);

                        var zillowLink = result.results[0].result[0].links[0].homedetails;

                        var addressText = '<h4 id="firstHeading" class="firstHeading">' +
                                result.results[0].result[0].address[0].street[0] + ' ' + result.results[0].result[0].address[0].city[0] + '</h4>';
                        var streetUrl = "https://maps.googleapis.com/maps/api/streetview?size=200x200&location=" + latitude + "," + longitude + "&fov=90&heading=235&pitch=10";
                        var streetViewImage = '<img src=' + streetUrl + ' alt="Street View" height="200" width="100%">';

                        var contentString = '<div id="content">' +
                                streetViewImage +
                                '<div id="siteNotice">' +
                                '</div>' +
                                addressText +
                                '<div id="bodyContent">' +
                                '<p>' +
                                '<b>' + bedrooms + ' bedrooms &#8226 ' + bathrooms + ' bathrooms &#8226 ' + squareFeet + ' sqft. </b><br>' +
                                'Zestimate: ' + zestimate +
                                '<p><a target="_tab" href=' + zillowLink + '>' +
                                'Zillow Info</a>' +
                                    // ' &#8226 <a href="javascript:getZillowComps('+result.results[0].result[0].zpid[0]+')" >Show Comps</a></p>'+
                                '</div>' +
                                '</div>';

                        var houseInfowindow = new google.maps.InfoWindow({
                            content: contentString,
                            maxWidth: 400
                        });

                        google.maps.event.addListener(marker, 'click', function () {

                            currentInfoWindow.close();
                            houseInfowindow.open(map, this);
                            currentInfoWindow = houseInfowindow;

                        });

                    }

                },
                error: function (jqXHR, textstatus, errorThrown) {
                    //alert('text status ' + textstatus + ', err ' + errorThrown);
                    humane.log("Error getting location", {timeout: 1000, clickToClose: true });
                }
            });
        }
        ;


        function getZillowComps(zpid) {
            console.log("trying to get comps: " + zpid);

            $.ajax({
                type: "GET",
                url: '/getCompResults',
                data: {
                    zpid: zpid
                },
                success: function (result) {
                    console.log("comps Success: " + JSON.stringify(result)); //Returned data from call

                },
                error: function (jqXHR, textstatus, errorThrown) {
                    alert('text status ' + textstatus + ', err ' + errorThrown);
                }
            });

        };



        /**
         * Google Fusion Layer median bounds
         * */
        function toggleMedianBounds() {

            if(layer != null){
                layer.setMap(null);
                layer = null;
                document.getElementById('price_overlay').className = 'inactive';
            }else {
                layer = new google.maps.FusionTablesLayer({
                    query: {
                        select: 'geometry',
                        from: '1kZPTdlzEO72BSskrYdigl1BU96n6CMcN7e3oUO5o'
                    },
                    options: {
                        styleId: 2,
                        templateId: 2
                    }
                });
                layer.setMap(map);
                document.getElementById('price_overlay').className = 'active';
            }
        }




        /** TODO Does not work, V3 throws errors when trying to save
         */
         function savePlaceInfo(place) {
            console.log("trying to save: "+place);

            $.ajax({
                type: "GET",
                url: '/saveResults',
                data: { data: place
                        },
                success: function(result) {
                    //console.log("Save Success: "+result); //Returned data from call

                },
                error: function(jqXHR, textstatus, errorThrown) {
                    alert('text status ' + textstatus + ', err ' + errorThrown);
                }
            });

        };



        function callDatabase(){

            var minField = document.getElementById('min_field').value;
            var maxField = document.getElementById('max_field').value;

            if((minField == null || minField == "") || (maxField == null || maxField == "")){
                alert("Please enter valid minimum and maximum range values.")
            }
            else if(!isNaN(document.getElementById('min_field').value) && !isNaN(document.getElementById('max_field').value)){

                clearHouseMarkers();

                $.ajax({
                    type: "GET",
                    url: '/getHousesInRentalRange',
                    data: { minRange: document.getElementById('min_field').value,
                            maxRange: document.getElementById('max_field').value
                    },
                    success: function(result) {


                        var counter = 0;
                        for(var a = 0; a < result.length; a++) {
                            //console.log("Object "+a+":"+JSON.stringify(result[a]));
                            if (!(result[a].zpid in houseMarkerHash)) {
                                createAndShowHome(result[a]);
                                counter++;
                            }
                        }

                        humane.log(counter +" results found", {timeout: 2000, clickToClose: true });

                    },
                    error: function(jqXHR, textstatus, errorThrown) {
                        //alert('text status ' + textstatus + ', err ' + errorThrown);
                        console.log("call error: ")
                    }
                });

            }
            else{
                if(!isNaN(document.getElementById('min_field').value))
                    alert("Please enter a valid minimum range value.")
                else if(!isNaN(document.getElementById('max_field').value))
                    alert("Please enter a valid maximum range value.")
            }

        }

        function createAndShowHome(houseInfo) {

            var marker = new google.maps.Marker({
                map: map,
                position: new google.maps.LatLng(houseInfo.latitude, houseInfo.longitude),
                animation: google.maps.Animation.DROP,
                icon: houseIcon
            });

            //console.log("houseInfo.zpid: "+houseInfo.zpid);
            houseMarkerHash[houseInfo.zpid] = marker;

            var bathrooms = houseInfo.baths;
            var bedrooms = houseInfo.beds;

            var rentalCost = "$" + houseInfo.rental;

            var zillowLink = houseInfo.url;


            if (houseInfo.sqft != null) {

            }else{

            }


            if (houseInfo.address != null) {
                var addressText = '<h4 id="firstHeading" class="firstHeading">' +
                        houseInfo.address + ' ' + houseInfo.state + '</h4>';
            }
            else{
                var addressText = '<h4 id="firstHeading" class="firstHeading">' + houseInfo.state + '</h4>';
            }
            var streetUrl = "https://maps.googleapis.com/maps/api/streetview?size=200x200&location="+houseInfo.latitude+","+houseInfo.longitude+"&fov=90&heading=235&pitch=10";
            var streetViewImage = '<img src='+streetUrl+' alt="Street View" height="200" width="100%">';

            var contentString = '<div id="content">' +
                    streetViewImage+
                    '<div id="siteNotice">'+
                    '</div>'+
                    addressText+
                    '<div id="bodyContent">'+
                    '<p>' +
                    '<b>'+bedrooms+' bedrooms &#8226 '+bathrooms+' bathrooms</b><br>' +
                    'Rental Cost: '+rentalCost+
                    '<p><a target="_tab" href='+zillowLink+'>'+
                    'Zillow Info</a>'+
                    //' &#8226 <a href="javascript:getZillowComps('+houseInfo.comparables+')" >Show Comps</a></p>'+
                    '</div>'+
                    '</div>';

            var houseInfowindow = new google.maps.InfoWindow({
                content: contentString,
                maxWidth: 400
            });

            google.maps.event.addListener(marker, 'click', function () {
                //console.log(houseInfo);
                houseInfowindow.open(map, this);
            });


        }



/*
        function buildBox(coordinates){
            var regionBounds = [];
            for (var a in coordinates) {
                //console.log("Long: "+coordinates[a][0]);
                //console.log("Lat: "+coordinates[a][1]);
                regionBounds.push(new google.maps.LatLng(coordinates[a][1], coordinates[a][0]))
            }

            var regionPath = new google.maps.Polyline({
                path: regionBounds,
                geodesic: false,
                strokeColor: '#FF5722',
                strokeOpacity: 1.0,
                strokeWeight: 2
            });

            regionPath.setMap(map);
        }
*/
/*
        function hideRangeCircles(){
            rangeShowing = false;

            largeCircle.setMap(null);
            medCircle.setMap(null);
            smallCircle.setMap(null);
        }
        */
/*
        function showRangeCircles(location){


            rangeShowing = true;

            //var circle = new google.maps.Circle({radius: 10, center: map.getCenter()});
            //map.fitBounds(circle.getBounds());

            var city = citymap.sandiego1;

            var largeOptions = {
                strokeColor: '#03A9F4',
                strokeOpacity: 0.18,
                strokeWeight: 2,
                fillColor: '#03A9F4',
                fillOpacity: 0.2,
                map: map,
                center: new google.maps.LatLng(location.latitude, location.longitude)
                //radius: (1609.34)*1 //in meters
            };

            var medOptions = {
                strokeColor: '#03A9F4',
                strokeOpacity: 0.18,
                strokeWeight: 2,
                fillColor: '#03A9F4',
                fillOpacity: 0.1,
                map: map,
                center: map.getCenter() //city.center,
                //radius: (1609.34)*.5 //in meters
            };

            var smallOptions = {
                strokeColor: '#03A9F4',
                strokeOpacity: 0.18,
                strokeWeight: 2,
                fillColor: '#03A9F4',
                fillOpacity: 0.09,
                map: map,
                center: map.getCenter() //city.center,
                //radius: (1609.34)*.25 //.5 mile
            };




            // Add the circle for this city to the map.
            largeCircle = new google.maps.Circle(largeOptions);
            medCircle = new google.maps.Circle(medOptions);
            smallCircle = new google.maps.Circle(smallOptions);


            startAnimateCircles();


        }
*/
/*

        var smallRadius = 1;
        var mediumRadius = 1;
        var largeRadius = 1;
        var smallTime = 0;
        var mediumTime = 0;
        var largeTime = 0;

        var largeCircleInterval;
        var mediumCircleInterval;
        var smallCircleInterval;
*/

/*

        function smallCircleAnimation() {

            if ((smallRadius < smallCircleRadius)) {
                smallRadius =  -(1-(Math.pow((1-smallTime), 2)));
                smallCircle.setRadius(smallRadius);
            }
            else{
                clearInterval(smallCircleAnimation);
            }
            smallTime = smallTime += 5;
        }

        function medCircleAnimation() {

            if ((mediumRadius < medCircleRadius)) {
                mediumRadius =  -(1-(Math.pow((1-mediumTime), 2)));
                medCircle.setRadius(mediumRadius);
            }
            else{
                clearInterval(medCircleAnimation);
            }
            mediumTime = mediumTime += 3;
        }

        function largeCircleAnimation() {
            if ((largeRadius < largeCircleRadius)) {
                largeRadius =  -(1-(Math.pow((1-largeTime), 2)));
                largeCircle.setRadius(largeRadius);
            }
            else{
                clearInterval(largeCircleInterval);
            }
            largeTime = largeTime += 1;

        }


*/
/*
        function startAnimateCircles(){
            smallRadius = 1;
            mediumRadius = 1;
            largeRadius = 1;
            smallTime = 0;
            mediumTime = 0;
            largeTime = 0;

            largeCircleInterval = setInterval(largeCircleAnimation, 5);
            mediumCircleInterval = setInterval(medCircleAnimation, 3);
            smallCircleInterval = setInterval(smallCircleAnimation, 1);
        }

*/


        function toggleMusic(){
            if(playSound){
                daySound.pause();
                nightSound.pause();
                playSound = false;
            }else{
                daySound.play();
                nightSound.play()
                playSound = true;
            }
        }


        function handleNoGeolocation(errorFlag) {
            if (errorFlag) {
                var content = 'Error: The Geolocation service failed.';
            } else {
                var content = 'Error: Your browser doesn\'t support geolocation.';
            }

            var options = {
                map: map,
                position: new google.maps.LatLng(60, 105),
                content: content
            };

            var infowindow = new google.maps.InfoWindow(options);
            map.setCenter(options.position);
        }

        function moveMap(xChange, yChange) {
                map.panBy(xChange, yChange);
            }
            function setZoom(z) {
                map.setZoom(map.getZoom() - z);
            }

            var mapMoveUpdate = function() { 
                var sMapType = map.getMapTypeId();
                
                for(var i = 0; i < markers.length; i++) {
                    markers[i].setMap(null);
                }
                if(sMapType == DAY_MAPTYPE_ID) { //daytime
                    
                    var dayRequest = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['grocery_or_supermarket']
                    };

                    service.nearbySearch(dayRequest, function (results, status) {
                        daySound.volume(0.05 * results.length);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {
                            markers = [];
                            for (var i = 0; i < results.length; i++) {
                                var mark = results[i];
                                var place = new google.maps.LatLng(mark.geometry.location.A,mark.geometry.location.F);
                                var marked = new google.maps.Marker({
                                    position: place/*,
                                    icon: barIcon*/
                                });
                                marked.setMap(map);
                                markers.push(marked);
                            }
                        }
                    });
                }
                else { //nighttime
                    
                    var nightRequest = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['bar', 'night_club']
                    };
                    service.nearbySearch(nightRequest, function (results, status) {
                        nightSound.volume(0.05 * results.length);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {
                            markers = [];
                            for (var i = 0; i < results.length; i++) {
                                var mark = results[i];
                                var place = new google.maps.LatLng(mark.geometry.location.A,mark.geometry.location.F);
                                var marked = new google.maps.Marker({
                                    position: place,
                                    icon: barIcon
                                });
                                marked.setMap(map);
                                markers.push(marked);
                            }
                          }
                    });
                }
            }


    </script>
    <style type="text/css">
        html, body {
            margin-left: 0px;
            margin-right: 0px;
            margin-top:0px;
            height: 100%;
            width: 100%;
        }
    </style>
</head>

<body>

<!--
<div id="locationField">
    <input id="autocomplete" placeholder="Enter your address"
           onFocus="geolocate()" type="text"/>
</div>
-->
<div id="mapContainer">
<div id="circle"></div>
<div id="googleMap" style="width:100%;height:100%">
</div>
</div>

<style type="text/css">
    #mapContainer {
        position: relative;
        height: 100%;
    }
    #googleMap {
        margin-top: 80px;
        margin-bottom: 40px;
        position: relative;

    }
    #circle {
                height: 20px;
                width: 20px;
                border-radius: 100%;
                /*border: 2px solid black;*/
                background-color: white;
                position: absolute;
                left: 0px;
                z-index: 100;
            }

</style>





<button onclick="clearHouseMarkers()">Clear Houses</button>
<!--
<button onclick="callDatabase()">Delphi</button>
<button onclick="getZillowComps(16834453)">Get Comps</button>
-->

<!-- About Section -->
<section id="about">
    <div class="container">
        <div class="row">
            <div class="col-lg-12 text-center">
                <h2 class="section-heading">More Info</h2>
                <h3 class="section-subheading text-muted">See what's going on in San Diego</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <ul class="timeline">
                    <li>
                        <div id="age_chart"></div>
                        <div class="timeline-image">
                            <img class="img-circle img-responsive" src="img/about/1.jpg" alt="">
                        </div>
                        <div class="timeline-panel">
                            <div class="timeline-heading">
                                <h4>Daytime</h4>
                                <h4 class="subheading">The busy city</h4>
                            </div>
                            <div class="timeline-body">
                                <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p>
                            </div>
                        </div>
                    </li>


                    <li class="timeline-inverted">
                        <div id="marital_chart"></div>
                        <div class="timeline-image">
                            <img class="img-circle img-responsive" src="img/about/4.jpg" alt="">
                        </div>
                        <div class="timeline-panel">
                            <div class="timeline-heading">
                                <h4>Nightlife</h4>
                                <h4 class="subheading">The happy hours</h4>
                            </div>
                            <div class="timeline-body">

                                <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p>
                            </div>
                        </div>
                    </li>
                    <li class="timeline-inverted">
                        <div class="timeline-image">
                            <h4>Be Part
                                <br>Of Our
                                <br>Story!</h4>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>

<footer>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <span class="copyright">Copyright &copy; Bachelor's Pad</span>
            </div>
            <div class="col-md-4">
                <ul class="list-inline social-buttons">
                    <li><a href="#"><i class="fa fa-twitter"></i></a>
                    </li>
                    <li><a href="#"><i class="fa fa-facebook"></i></a>
                    </li>
                    <li><a href="#"><i class="fa fa-linkedin"></i></a>
                    </li>
                </ul>
            </div>
            <div class="col-md-4">
                <ul class="list-inline quicklinks">
                    <li><a href="#">Designed by Shuangli Zhou</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</footer>


<script>
    var circle = document.getElementById('circle');
        var x = 0;
        var y = 0;
        var z = 0;
        var zoom = false;
        var lastZoom = 0;
        Leap.loop(function (frame) {
            frame.hands.forEach(function(hand, index) {
                var pos = hand.screenPosition();
                var grab = hand.grabStrength.toPrecision(2) > 0.9 ? true : false;
                //output.innerHTML = 'X:' + Math.floor(pos[0]) + ' Y:' + Math.floor(pos[1]) + ' Z:' + Math.floor(pos[2]) + ' Grab:' + grab;
                circle.style.left = Math.floor(pos[0]) + 'px';
                    circle.style.top = Math.floor(pos[1]) + 'px';
                    circle.style.width = (Math.floor(pos[2] / 3) + 100) + 'px';
                    circle.style.height = (Math.floor(pos[2] / 3) + 100) + 'px';
                    circle.style.marginLeft = "-" + Math.floor(pos[1] / 2) + "px";
                    circle.style.marginTop = "-" + Math.floor(pos[1] / 2) + "px";
                    circle.style.opacity = hand.confidence;
                if(grab && hand.confidence > 0.3) {
                    moveMap((x - Math.floor(pos[0])), (y - Math.floor(pos[1])));
                    //out2.innerHTML = (z - Math.floor(pos[2]));
                    if(!zoom && ((new Date()) - lastZoom) > 1500) {
                        zoom = true;
                        lastZoom = new Date();
                        //z = (z - Math.floor(pos[2]));
                        z = Math.floor(pos[2]);
                    }
                    
                    x = Math.floor(pos[0]);
                    y = Math.floor(pos[1]);
                    //z = Math.floor(pos[2]);
                }
                else {
                    //console.log("grab: "+hand.grabStrength.toPrecision(2));
                    if(zoom) {
                        zoom = false;
                        z = (z - Math.floor(pos[2]));
                        //mapMoveUpdate();
                        lastZoom = new Date();
                        // console.log(z + " -> " + Math.floor(z / 200));
                        setZoom(Math.floor(z / 200));
                    }
                    x = Math.floor(pos[0]);
                    y = Math.floor(pos[1]);
                    z = Math.floor(pos[2]);
                }
                if(hand.confidence > 0.6 && frame.fingers[0].extended && frame.fingers[4].extended && !frame.fingers[1].extended && !frame.fingers[2].extended && !frame.fingers[3].extended && map.getMapTypeId() == DAY_MAPTYPE_ID) {
                    map.setMapTypeId(NIGHT_MAPTYPE_ID);
                }
                else if(hand.confidence > 0.6 && !frame.fingers[0].extended && frame.fingers[4].extended && !frame.fingers[1].extended && frame.fingers[2].extended && frame.fingers[3].extended && map.getMapTypeId() != DAY_MAPTYPE_ID) {
                    map.setMapTypeId(DAY_MAPTYPE_ID);
                }

                //map.setZoom(/* 0-21 depending on Z from handPos*/);
            });
        }).use('screenPosition', {scale: 0.45});



///Age stats
    $.ajax({
        type: "GET",
        url: '/readAgeStats',
        success: function(result) {

            //console.log("readAgeStats result: "+JSON.stringify(result.data[0]));
            //console.log("readAgeStats result: "+JSON.stringify(result.data[0][11]));

            var locations = result.data.map(function (item) {
                return item[10];
            });

            var females = result.data.map(function (item) {
                return item[19];
            });

            var males = result.data.map(function (item) {
                return item[18];
            });

            var pop45to64 = result.data.map(function (item) {
                return item[16];
            });

            var pop25to44 = result.data.map(function (item) {
                return item[15];
            });


            var chart = c3.generate({
                bindto: '#age_chart',
                data: {
                    x : 'x',
                    json: {
                        x : locations,
                        Females: females,
                        Males: males,
                        Pop45to64: pop45to64,
                        Pop25to44: pop25to44
                    },
                    colors: {
                        Males: '#4ea8f6',
                        Females: '#FF9800',
                        Pop45to64: '#536DFE',
                        Pop25to44: '#B6B6B6'
                    },
                    groups: [
                        //['Females', 'Males']
                    ],
                    types: {
                        //Single: 'area-spline',
                        Females: 'bar',
                        Males: 'bar',
                        Pop45to64: 'area-spline',
                        Pop25to44: 'area-spline'
                    }
                },
                legend: {
                    position: 'right'
                },
                axis: {
                    x: {
                        type: 'category',
                        tick: {
                            rotate: 55,
                            multiline: false,
                            centered: true
                        },
                        height: 150
                    }
                }
            });

        },
        error: function(jqXHR, textstatus, errorThrown) {
            //alert('text status ' + textstatus + ', err ' + errorThrown);
            console.log("call error: ")

        }
    });


    $.ajax({
        type: "GET",
        url: '/readMaritalStatus',
        success: function(result) {

            //console.log("marital result: "+JSON.stringify(result.data[0]));
            //console.log("marital result: "+JSON.stringify(result.data[0][11]));

            var locations = result.data.map(function (item) {
                return item[9];
            });

            var totalPopulation = result.data.map(function (item) {
                return item[11];
            });

            var singleStats = result.data.map(function (item) {
                return item[12];
            });

            var marriedStats = result.data.map(function (item) {
                return item[13];
            });

            var divorcedStats = result.data.map(function (item) {
                return item[16];
            });

            var chart = c3.generate({
                bindto: '#marital_chart',
                data: {
                    x : 'x',
                    json: {
                        x : locations,
                        Single: singleStats,
                        Married: marriedStats,
                        Divorced: divorcedStats
                    },
                    colors: {
                        Single: '#4ea8f6',
                        Married: '#FF9800',
                        Divorced: '#B6B6B6'
                    },
                    groups: [
                        //['Single', 'Married']
                    ],
                    types: {
                        Divorced: 'area-spline',
                        Married: 'bar',
                        Single: 'bar'
                    }
                },
                legend: {
                    position: 'right'
                },
                axis: {
                    x: {
                        type: 'category',
                        tick: {
                            rotate: 55,
                            multiline: false,
                            centered: true
                        },
                        height: 150
                    }
                }
            });


        },
        error: function(jqXHR, textstatus, errorThrown) {
            //alert('text status ' + textstatus + ', err ' + errorThrown);
            console.log("call error: ")


        }
    });



</script>
</body>
</html>