<!DOCTYPE html>
<html>
<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <!-- Bootstrap Core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="css/agency.css" rel="stylesheet">

    <!-- Custom Fonts -->
    <link href="font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
    <link href='https://fonts.googleapis.com/css?family=Kaushan+Script' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700' rel='stylesheet' type='text/css'>

    <script src="javascripts/howler.min.js" type="text/javascript"></script>
    <script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
    <script src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
    <script src="http://js.leapmotion.com/leap-0.6.4.js"></script>
    <script src="http://js.leapmotion.com/leap-plugins-0.1.8.js"></script>

    <!-- Google -->
    <link href='https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700' rel='stylesheet' type='text/css'>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>


    <!-- Load c3.css -->
    <link href="css/c3.min.css" rel="stylesheet" type="text/css">

    <!-- Load d3.js and c3.js-->
    <script src="js/d3.min.js" charset="utf-8"></script>
    <script src="js/c3.min.js"></script>

    <!-- Navigation -->
    <nav class="navbar navbar-default navbar-fixed-top">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header page-scroll">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand page-scroll" href="#page-top">Bachelor Pad</a>
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right">
                    <li class="hidden">
                        <a href="#page-top"></a>
                    </li>
                    <li>
                        <a class="page-scroll" href="#item1">About</a>
                    </li>
                    <li>
                        <a class="page-scroll" href="#item2">OurTeam</a>
                    </li>
                    <li>
                        <a class="page-scroll" href="javascript:toggleMusic()">Sound</a>
                    </li>

                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>

    <!-- Header -->
    <header>
        <div class="container">
            <div class="intro-text">
                <div class="intro-lead-in">FIND YOUR IDEAL</div>
                <div class="intro-lead-in">HOUSING</div>
                <div class="intro-lead-in">SIMPLY, ESAILY AND </div>
                <div class="intro-lead-in">BEAUTIFULLY.</div>

                <a href="#services" class="page-scroll btn btn-xl">explore</a>
            </div>
        </div>
    </header>




    <div id='cssmenu'>
        <ul>

            <li><a href="javascript:toggleMedianBounds()"><span>Price</span></a></li>
            <li><a href="javascript:toggleTrafficLayer()"><span>Traffic</span></a></li>
            <li><a href="javascript:toggleBarMarkers()"><span>Bars</span></a></li>
            <li ><a href="javascript:toggleShoppingMarkers()"><span>Stores</span></a></li>

        </ul>
    </div>

    <style type="text/css">
        #cssmenu
        {
            position: absolute;
            top: 925px;
            left: 180px;
            z-index: 2;
        }

        #inputb
        {
            margin-top: 10px;
            margin-left: 10px;
            margin-right: 10px;
        }
    </style>




    <script>

        var ucsd = new google.maps.LatLng(32.880694,-117.236331);
        var NIGHT_MAPTYPE_ID = 'Night Map';
        var DAY_MAPTYPE_ID = 'Day Map';

        var nightSound = new Howl({
            urls: ['sounds/nightlife.ogg', 'sounds/nightlife.m4a'/*, 'sounds/nightlife.mp3'*/],
            autoplay: false,
            loop: true,
            volume: 0.2
        });
        var daySound = new Howl({
            urls: ['sounds/daytime.ogg', 'sounds/daytime.m4a'/*, 'sounds/daytime.mp3'*/],
            autoplay: false,
            loop: true,
            volume: 0.2
        });

        var barIcon = {
            scale: 1/4,
            url: 'images/bar_cocktail.png',
            size: new google.maps.Size(32, 37),
            origin: new google.maps.Point(0,0),
            anchor: new google.maps.Point(16, 16)
        };
        var marketIcon = {
            scale: 1/4,
            url: 'images/supermarket.png',
            size: new google.maps.Size(32, 37),
            origin: new google.maps.Point(0,0),
            anchor: new google.maps.Point(16, 16)
        };
        var houseIcon = {
            scale: 1/4,
            url: 'images/home.png',
            size: new google.maps.Size(32, 37),
            origin: new google.maps.Point(0,0),
            anchor: new google.maps.Point(16, 16)
        };

        var nightMapStyle = [
            {
                stylers: [
                    { hue: "#194C62" },
                    { saturation: -40 },
                    { invert_lightness: true}
                ]
            }
        ];


        var dayMapStyle = [
            {
               /* stylers: [
                    { hue: "#1765C62" },
                    { saturation: -40 },
                    { invert_lightness: true}
                ]*/
            }
        ];

        var testDayStyle = [
            {
                "featureType": "landscape",
                "elementType": "geometry.fill",
                "stylers": [
                    {"lightness": 80},
                    {"gamma": 4.41}
                ]
            }, {
                "elementType": "labels",
                "stylers": [
                    {"visibility": "off"}
                ]
            }, {
                "featureType": "road",
                "stylers": [
                    {"hue": "#2a00ff"},
                    {"saturation": 50},
                    {"lightness": -15}
                ]
            }, {
                "featureType": "road.highway",
                "stylers": [
                    {"hue": "#ff3300"},
                    {"visibility": "off"}
                ]
            }, {}
        ];


        var nightStyledMapOptions = {
            name: 'Night Style'
        };
        var dayStyledMapOptions = {
            name: 'Day Style'
        };

        var boundingCircle;
        var boundingCircleShowing = false;

        var mapOptions = {
            zoom: 12,
            center: ucsd,
            mapTypeControlOptions: {
                mapTypeIds: [
                    DAY_MAPTYPE_ID,
                    NIGHT_MAPTYPE_ID]
            },
            mapTypeId: NIGHT_MAPTYPE_ID
        };

        var nightMapType = new google.maps.StyledMapType(nightMapStyle, nightStyledMapOptions);
        var dayMapType = new google.maps.StyledMapType(testDayStyle, dayStyledMapOptions);


        var placeSearch, autocomplete;
        var map, layer, trafficLayer;

        var geocoder;
        var rangeShowing = false;
        var citymap = {};
        var largeCircle;
        var medCircle;
        var smallCircle;

        var largeCircleRadius = (1609.34)*1; //meters
        var medCircleRadius = (1609.34)*.5;
        var smallCircleRadius = (1609.34)*.25;

        var playSound = false;
        var eFunction;

        var showShoppingMarkers = true;
        var showBarMarkers = true;

        var dayRequest;
        var service;

        var barMarkerHash = {};
        var storeMarkerHash = {};

        var infowindow;

        var regionHash = null;


        function initialize(){

            map = new google.maps.Map(document.getElementById("googleMap"), mapOptions);
            map.mapTypes.set(NIGHT_MAPTYPE_ID, nightMapType);
            map.mapTypes.set(DAY_MAPTYPE_ID, dayMapType);
            map.setMapTypeId(NIGHT_MAPTYPE_ID);
            service = new google.maps.places.PlacesService(map);
            infowindow = new google.maps.InfoWindow();
            geocoder = new google.maps.Geocoder();



            // Try HTML5 geolocation
            if(navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var pos = new google.maps.LatLng(position.coords.latitude,
                            position.coords.longitude);


                    map.setCenter(pos);
                }, function() {
                    handleNoGeolocation(true);
                });
            } else {
                // Browser doesn't support Geolocation
                handleNoGeolocation(false);
            }





            google.maps.event.addListener(map, 'maptypeid_changed', function() {

                eFunction = Math.pow(Math.E, (22-(map.getZoom())))+2;

                //console.log("map has changed to: "+eFunction);
                //daySound.pause();
                //nightSound.pause();

                if(map.getMapTypeId() == DAY_MAPTYPE_ID) {

                    setAllMarkers(barMarkerHash, null);
                    if(showShoppingMarkers)
                        setAllMarkers(storeMarkerHash, map);

                    nightSound.fade(0, 0, 1500, function() {
                        nightSound.pause();
                    });
                    if(playSound)
                        daySound.play();

                    dayRequest = {
                        location: map.getCenter(),
                        radius: eFunction,
                        types: ['grocery_or_supermarket']
                    };

                    service.nearbySearch(dayRequest, function (results, status) {

                        daySound.fade(0, 0.1 * results.length, 500);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            for (var i = 0; i < results.length; i++) {
                                createMarker(results[i], marketIcon);
                            }

                        }
                    });
                }
                else if(map.getMapTypeId() == NIGHT_MAPTYPE_ID) {

                    if(showBarMarkers)
                        setAllMarkers(barMarkerHash, map);

                    setAllMarkers(storeMarkerHash, null);

                    daySound.fade(0, 0, 1500, function() {
                        daySound.pause();
                    });
                    if(playSound)
                        nightSound.play();

                    var nightRequest = {
                        location: map.getCenter(),
                        radius: eFunction,
                        types: ['bar', 'night_club']
                    };
                    service.nearbySearch(nightRequest, function (results, status) {
                        nightSound.fade(0, 0.05 * results.length, 500);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            for (var i = 0; i < results.length; i++) {
                                createMarker(results[i], barIcon);
                            }
                        }
                    });
                }

            });




            google.maps.event.addListener(map, 'dragstart', function() {
                var zoom = map.getZoom();
                if(zoom < 16)
                    zoom = 16;

                eFunction = Math.pow(Math.E, ((22-(zoom)))+1);

                if(map.getMapTypeId() == DAY_MAPTYPE_ID) { //daytime

                    dayRequest = {
                        location: map.getCenter(),
                        radius: (eFunction),
                        types: ['grocery_or_supermarket']
                    };

                    service.nearbySearch(dayRequest, function (results, status) {

                        if(results != null){
                            daySound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                        }
                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            for (var i = 0; i < results.length; i++) {
                                createMarker(results[i], marketIcon);
                            }
                        }

                    });
                }
                else { //nighttime

                    var nightRequest = {
                        location: map.getCenter(),
                        radius: eFunction,
                        types: ['bar', 'night_club']
                    };
                    var alcRequest = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['liquor_store']
                    };
                    service.nearbySearch(nightRequest, function (results, status) {

                        if(results != null){
                            nightSound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                        }

                        if (status == google.maps.places.PlacesServiceStatus.OK) {

                            if (status == google.maps.places.PlacesServiceStatus.OK) {
                                for (var i = 0; i < results.length; i++) {
                                    createMarker(results[i], barIcon);
                                }
                            }
                        }

                    });
                }


            });


            google.maps.event.addListener(map, 'click', function(event) {

                var lat = event.latLng.lat();
                var lng = event.latLng.lng();
                geocodePosition(event.latLng);
            });


            //setupMapRegions();
            //getMedianValues();

            initializeMapSoundAndIcons();


        }


        function createMarker(place, icon) {

            //Save the marker to hash for use later
            if(icon == barIcon){
                if(barMarkerHash[place.id] != undefined){
                    return;
                }else{

                    var marker = new google.maps.Marker({
                        //map: map,
                        position: place.geometry.location,
                        animation: google.maps.Animation.DROP,
                        icon: icon
                    });

                    barMarkerHash[place.id] = marker;
                    if(showBarMarkers)
                        marker.setMap(map);
                }
            }

            else if(icon == marketIcon ){
                if(storeMarkerHash[place.id] != undefined){
                    return;
                }else{
                    var marker = new google.maps.Marker({
                        //map: map,
                        position: place.geometry.location,
                        animation: google.maps.Animation.DROP,
                        icon: icon
                    });

                    storeMarkerHash[place.id] = marker;
                    if(showShoppingMarkers)
                        marker.setMap(map);
                }
            }


            google.maps.event.addListener(marker, 'click', function() {
                infowindow.setContent(place.name);
                infowindow.open(map, this);
            });


        }


        google.maps.event.addDomListener(window, 'load', initialize);



        function toggleTrafficLayer(){

            if(trafficLayer == null){
                trafficLayer = new google.maps.TrafficLayer();
                trafficLayer.setMap(map);
            }else{
                trafficLayer.setMap(null);
                trafficLayer = null;
            }


        }

        function toggleBarMarkers(){

            if(showBarMarkers){
                setAllMarkers(barMarkerHash, null);

            }else{
                setAllMarkers(barMarkerHash, map);
            }
            showBarMarkers = !showBarMarkers;
        }

        function toggleShoppingMarkers(){

            if(showShoppingMarkers){
                setAllMarkers(storeMarkerHash, null);

            }else{
                setAllMarkers(storeMarkerHash, map);
            }

            showShoppingMarkers = !showShoppingMarkers;
        }


        function setAllMarkers(hash, map){
            Object.keys(hash).forEach(function (key) {
                //console.log(hash[key]);
                hash[key].setMap(map);
            })

        }


        function initializeMapSoundAndIcons(){
            //13
            eFunction = Math.pow(Math.E, (22-(map.getZoom())))+2;
            if(map.getMapTypeId() == DAY_MAPTYPE_ID) {

                dayRequest = {
                    location: map.getCenter(),
                    radius: (eFunction),
                    types: ['grocery_or_supermarket']
                };

                service.nearbySearch(dayRequest, function (results, status) {
                    if(playSound)
                        //daySound.fadeIn(0.05 * results.length, 1500);
                        daySound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                    else
                        daySound.volume(0);
                    if (status == google.maps.places.PlacesServiceStatus.OK) {
                        for (var i = 0; i < results.length; i++) {
                            createMarker(results[i], marketIcon);
                        }
                    }
                });
            }
            else { //nighttime

                var nightRequest = {
                    location: map.getCenter(),
                    radius: eFunction,
                    types: ['bar', 'night_club']
                };

                service.nearbySearch(nightRequest, function (results, status) {
                    if(playSound)
                        daySound.volume(0.05 * results.length, 0.05 * results.length, 1000);
                    else
                        daySound.volume(0);
                    if (status == google.maps.places.PlacesServiceStatus.OK) {
                        for (var i = 0; i < results.length; i++) {
                            createMarker(results[i], barIcon);
                        }
                    }

                });
            }
        }


/*
        function performSearch() {
            var request = {
                bounds: map.getBounds(),
                keyword: 'best view'
            };
            service.radarSearch(request, callback);
        }

        function callback(results, status) {
            if (status != google.maps.places.PlacesServiceStatus.OK) {
                alert(status);
                return;
            }
            for (var i = 0, result; result = results[i]; i++) {
                createMarker(result);
            }
        }

        function createMarker(place) {
            var marker = new google.maps.Marker({
                map: map,
                position: place.geometry.location,
                icon: {
                    // Star
                    path: 'M 0,-24 6,-7 24,-7 10,4 15,21 0,11 -15,21 -10,4 -24,-7 -6,-7 z',
                    fillColor: '#ffff00',
                    fillOpacity: 1,
                    scale: 1 / 4,
                    strokeColor: '#bd8d2c',
                    strokeWeight: 1
                }
            });
        }
*/



        /**
         * Show bounding Circle
         */
        function toggleBoundingCircle() {


            if (boundingCircle == null) {

                boundingCircle = new google.maps.Circle({
                    editable: true,
                    strokeColor: '#D32F2F',
                    strokeOpacity: 0.18,
                    strokeWeight: 2,
                    fillColor: '#D32F2F',
                    fillOpacity: 0.2,
                    radius: 1000,
                    center: map.getCenter()
                });
            }
            if (boundingCircleShowing){ //Hide

                console.log("CenterLoc:" +boundingCircle.getCenter())
                boundingCircle.setMap(null);
                var showCircleOptions = {
                    editable: false,
                    strokeColor: '#D32F2F',
                    strokeOpacity: 0,
                    fillColor: '#D32F2F',
                    fillOpacity: 0,
                    map: map,
                    center: boundingCircle.getCenter(),
                    radius: boundingCircle.radius
                };

                boundingCircle = new google.maps.Circle(showCircleOptions);
            }
            else{ //Show

                var showCircleOptions = {
                    editable: true,
                    strokeColor: '#D32F2F',
                    strokeOpacity: 0.18,
                    strokeWeight: 2,
                    fillColor: '#D32F2F',
                    fillOpacity: 0.2,
                    map: map,
                    center: boundingCircle.getCenter(),
                    radius: boundingCircle.radius
                };

                boundingCircle = new google.maps.Circle(showCircleOptions);
            }

            boundingCircleShowing = !boundingCircleShowing;
        }


        /**
         * AutoComplete locator
         *
         * */
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = new google.maps.LatLng(
                            position.coords.latitude, position.coords.longitude);
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }
        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            console.log("The place: "+JSON.stringify(place));
            /*for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
            */

        }


        function geocodePosition(pos) {
            geocoder.geocode({
                latLng: pos
            }, function(responses) {
                if (responses && responses.length > 0) {
                    //console.log(responses[0].formatted_address); //TODO do some action
                    getZillowId(responses[0].formatted_address);
                } else {
                    console.log('Cannot determine address at this location.'); //TODO give dialog?
                }
            });
        }

        function getZillowId(address) {
            $.ajax({
                type: "GET",
                url: '/getDeepSearchResults',
                data: {address: address},
                success: function(result) {
                    console.log("Success: "+JSON.stringify(result));
                    var latitude = result.results[0].result[0].address[0].latitude[0];
                    var longitude = result.results[0].result[0].address[0].longitude[0];
                    console.log("latitude "+JSON.stringify(result.results[0].result[0].address[0].latitude[0]));
                    console.log("longitude "+JSON.stringify(result.results[0].result[0].address[0].longitude[0]));

                    var marker = new google.maps.Marker({
                        map: map,
                        position: new google.maps.LatLng(latitude, longitude),
                        animation: google.maps.Animation.DROP,
                        icon: houseIcon
                    });


                    console.log(result.results[0].result[0].zpid[0]);

                    var bathrooms = result.results[0].result[0].bathrooms[0];
                    var bedrooms = result.results[0].result[0].bedrooms[0];

                    var squareFeet = result.results[0].result[0].finishedSqFt[0];

                    var zestimate = "$"+result.results[0].result[0].zestimate[0].amount[0]._;

                    if(result.results[0].result[0].hasOwnProperty(lastSoldPrice))
                        var lastSoldPrice = "$"+result.results[0].result[0].lastSoldPrice[0]._;

                    //console.log("TESTINGS: "+lotSize);

                    var zillowLink = result.results[0].result[0].links[0].homedetails;

                    var addressText = '<h4 id="firstHeading" class="firstHeading">'+
                            result.results[0].result[0].address[0].street[0]+' '+result.results[0].result[0].address[0].city[0]+'</h4>';
                    var streetUrl = "https://maps.googleapis.com/maps/api/streetview?size=200x200&location="+latitude+","+longitude+"&fov=90&heading=235&pitch=10";
                    var streetViewImage = '<img src='+streetUrl+' alt="Street View" height="200" width="100%">';

                    var contentString = '<div id="content">' +
                            streetViewImage+
                            '<div id="siteNotice">'+
                            '</div>'+
                            addressText+
                            '<div id="bodyContent">'+
                            '<p>' +
                            '<b>'+bedrooms+' bedrooms &#8226 '+bathrooms+' bathrooms &#8226 '+squareFeet+' sqft. </b><br>' +
                            'Zestimate: '+zestimate+
                            '<p><a target="_tab" href='+zillowLink+'>'+
                            'Zillow Info</a>'+
                            ' &#8226 <a href="javascript:getZillowComps('+result.results[0].result[0].zpid[0]+')" >Show Comps</a></p>'+
                            '</div>'+
                            '</div>';

                    var houseInfowindow = new google.maps.InfoWindow({
                        content: contentString,
                        maxWidth: 400
                    });

                    google.maps.event.addListener(marker, 'click', function () {
                        houseInfowindow.open(map, this);
                    });
                },
                error: function (jqXHR, textstatus, errorThrown) {
                    //alert('text status ' + textstatus + ', err ' + errorThrown);
                }
            });
        }
        ;


        function getZillowComps(zpid) {
            console.log("trying to get comps: " + zpid);

            $.ajax({
                type: "GET",
                url: '/getCompResults',
                data: {
                    zpid: zpid
                },
                success: function (result) {
                    console.log("comps Success: " + JSON.stringify(result)); //Returned data from call

                },
                error: function (jqXHR, textstatus, errorThrown) {
                    alert('text status ' + textstatus + ', err ' + errorThrown);
                }
            });

        }
        ;


        function toggleMedianBounds() {

            if(layer != null){
                layer.setMap(null);
                layer = null;
            }else {

                layer = new google.maps.FusionTablesLayer({
                    query: {
                        select: 'geometry',
                        from: '1kZPTdlzEO72BSskrYdigl1BU96n6CMcN7e3oUO5o'
                    },
                    options: {
                        styleId: 2,
                        templateId: 2
                    }
                });
                layer.setMap(map);


                console.log("showing median bounds")

                /*
                var resultsToShow = [];
                //var zA = [[92037, 0.2], [92121, 0.5], [92122, 0.8]];
                var year = 2012;


                if (regionHash == null) {
                    console.log("building regionHash");
                    regionHash = {};
                    $.ajax({
                        type: "GET",
                        url: '/readMedianData',
                        success: function (result) {

                            var regionObject = {
                                zipCode: '',
                                years: []
                            };

                            for (var a in result) {
                                if (a % 10 == 0) {
                                    regionHash[regionObject.zipCode] = regionObject;
                                    regionObject = {
                                        zipCode: '',
                                        years: []
                                    };
                                    regionObject.zipCode = result[a].RegionName;
                                    regionObject.years[a % 10] = result[a].Value;
                                }

                                regionObject.years[a % 10] = result[a].Value;

                            }

                            for (a in regionHash) {
                                var value = regionHash[a].years[(year - 2005)];
                                console.log("Pushing: "+regionHash[a].zipCode+", "+value+", "+(1 - ((regionHash[a].years[(year - 2005)] - 135) / 580)));
                                //resultsToShow.push([[regionHash[a].zipCode],[regionHash[a].years[(year-2005)]]]);
                                if(!value){
                                    value = -1;
                                }else{
                                    value = (1 - ((regionHash[a].years[(year - 2005)] - 135) / 580));
                                }
                                resultsToShow.push([[regionHash[a].zipCode], [value]]);
                            }
                            //colorZips(resultsToShow);
                            //1 - ((value - 135) / 580)
                        },
                        error: function (jqXHR, textstatus, errorThrown) {
                            alert('text status ' + textstatus + ', err ' + errorThrown);
                        }
                    });
                }
                else {
                    for (a in regionHash) {
                        var value = regionHash[a].years[(year - 2005)];
                        console.log("Pushing: "+regionHash[a].zipCode+", "+value+", "+(1 - ((regionHash[a].years[(year - 2005)] - 135) / 580)));
                        //resultsToShow.push([[regionHash[a].zipCode],[regionHash[a].years[(year-2005)]]]);
                        if(!value){
                           value = -1;
                        }else{
                            value = (1 - ((regionHash[a].years[(year - 2005)] - 135) / 580));
                        }
                        resultsToShow.push([[regionHash[a].zipCode], [value]]);
                    }
                    //colorZips(resultsToShow);
                }*/

            }

        }


        //zips should be in array format [ [zipcode, priceRating], [zipcode, priceRating], ... ]
        function colorZips(zipArr) {

            console.log("zips in colorZips: "+zipArr.length);
/*
            function toHex(n) {
                n = parseInt(n,10);
                if (isNaN(n)) return "00";
                n = Math.max(0,Math.min(n,255));
                return "0123456789ABCDEF".charAt((n-n%16)/16) + "0123456789ABCDEF".charAt(n%16);
            }
            var overColor = function(percent) {
                // 0, 255, 90 green
                // 255, 48, 0 red
                if(percent > -1) {
                    var red = 255 - Math.floor(255*percent);
                    var green = 48 + Math.floor(207*percent);
                    var blue = Math.floor(90*percent);
                    return "#" + toHex(red) + toHex(green) + toHex(blue);
                }
                else {
                    return "#000000";
                }
            }*/
            var stlCollection = function(zips) {

                var stl = [{
                    polygonOptions: {
                        fillColor: '#000000',
                        fillOpacity: 0.1
                    }
                }];
                var len = zips.length;
                for(var i = 0; i < len; i++) {
                    console.log("Coloring "+zips[i][0]+" to "+zips[i][1]);
                    stl.push({
                        where: 'name = ' + zips[i][0],
                        polygonOptions: {
                            fillColor: '#FFC107'//overColor(zips[i][1])
                        }
                    });
                }
                return stl;
            };
            layer.set('styles', stlCollection(zipArr));
        }


/*

        //zips should be in array format [ [zipcode, priceRating], [zipcode, priceRating], ... ]
        function colorRegions(zipHash) {

            layer = new google.maps.FusionTablesLayer({
                query: {
                    select: 'geometry',
                    from: '1Lae-86jeUDLmA6-8APDDqazlTOy1GsTXh28DAkw'
                },
                styles: [{
                    polygonOptions: {
                        fillColor: '#00FF00',
                        fillOpacity: 0.3
                    }
                }, {
                    where: 'zip2 in zipHash',
                    polygonOptions: {
                        fillColor: '#ffffff'
                    }
                }, {
                    where: 'zip2 = 92056',
                    polygonOptions: {
                        fillOpacity: 1.0,
                        fillColor: '#000000'
                    }

                }]
            });

            layer.setMap(map);
            //layer.set('styles', styleCollection(zipArr));
        }
*/

        /** TODO Does not work, V3 throws errors when trying to save
         */
         function savePlaceInfo(place) {
            console.log("trying to save: "+place);

            $.ajax({
                type: "GET",
                url: '/saveResults',
                data: { data: place
                        },
                success: function(result) {
                    console.log("Save Success: "+result) //Returned data from call

                },
                error: function(jqXHR, textstatus, errorThrown) {
                    alert('text status ' + textstatus + ', err ' + errorThrown);
                }
            });

        };


        function callDatabase(){

            $.ajax({
                type: "GET",
                url: '/delphidata',
                data: { data: "test"
                },
                success: function(result) {

                    console.log("call Success: "+result) //Returned data from call

                },
                error: function(jqXHR, textstatus, errorThrown) {
                    //alert('text status ' + textstatus + ', err ' + errorThrown);
                    console.log("call error: ")
                }
            });


        }



        function getMedianValues(){

            $.ajax({
                type: "GET",
                url: '/readMedianData',
                success: function(result) {
                    console.log("MedianInfo: "+JSON.stringify(result));
                    //for (var a in result.features) {
                    //    buildBox(result.features[a].geometry.coordinates[0][0]);
                    //}
                },
                error: function(jqXHR, textstatus, errorThrown) {
                    //alert('text status ' + textstatus + ', err ' + errorThrown);
                    console.log("call error: ")


                }
            });
        }


        /**
         * C3 visualization for Marital status in SD
         */
        function getMaritalStatus(){

            $.ajax({
                type: "GET",
                url: '/readMaritalStatus',
                success: function(result) {
                    console.log("readMaritalStatus: "+JSON.stringify(result));
                    //for (var a in result.features) {
                    //    buildBox(result.features[a].geometry.coordinates[0][0]);
                    //}
                },
                error: function(jqXHR, textstatus, errorThrown) {
                    //alert('text status ' + textstatus + ', err ' + errorThrown);
                    console.log("call error: ")

                }
            });
        }


        //Not very useful boundaries
        function setupMapRegions(){

            $.ajax({
                type: "GET",
                url: '/showMapRegions',
                success: function(result) {
                    for (var a in result.features) {
                        buildBox(result.features[a].geometry.coordinates[0][0]);
                    }
                },
                error: function(jqXHR, textstatus, errorThrown) {
                    //alert('text status ' + textstatus + ', err ' + errorThrown);
                    console.log("call error: ")


                }
            });
        }

        function buildBox(coordinates){
            var regionBounds = [];
            for (var a in coordinates) {
                //console.log("Long: "+coordinates[a][0]);
                //console.log("Lat: "+coordinates[a][1]);
                regionBounds.push(new google.maps.LatLng(coordinates[a][1], coordinates[a][0]))
            }

            var regionPath = new google.maps.Polyline({
                path: regionBounds,
                geodesic: false,
                strokeColor: '#FF5722',
                strokeOpacity: 1.0,
                strokeWeight: 2
            });

            regionPath.setMap(map);
        }


        function hideRangeCircles(){
            rangeShowing = false;

            largeCircle.setMap(null);
            medCircle.setMap(null);
            smallCircle.setMap(null);
        }

        function showRangeCircles(location){


            rangeShowing = true;

            //var circle = new google.maps.Circle({radius: 10, center: map.getCenter()});
            //map.fitBounds(circle.getBounds());

            var city = citymap.sandiego1;

            var largeOptions = {
                strokeColor: '#03A9F4',
                strokeOpacity: 0.18,
                strokeWeight: 2,
                fillColor: '#03A9F4',
                fillOpacity: 0.2,
                map: map,
                center: new google.maps.LatLng(location.latitude, location.longitude)
                //radius: (1609.34)*1 //in meters
            };

            var medOptions = {
                strokeColor: '#03A9F4',
                strokeOpacity: 0.18,
                strokeWeight: 2,
                fillColor: '#03A9F4',
                fillOpacity: 0.1,
                map: map,
                center: map.getCenter() //city.center,
                //radius: (1609.34)*.5 //in meters
            };

            var smallOptions = {
                strokeColor: '#03A9F4',
                strokeOpacity: 0.18,
                strokeWeight: 2,
                fillColor: '#03A9F4',
                fillOpacity: 0.09,
                map: map,
                center: map.getCenter() //city.center,
                //radius: (1609.34)*.25 //.5 mile
            };




            // Add the circle for this city to the map.
            largeCircle = new google.maps.Circle(largeOptions);
            medCircle = new google.maps.Circle(medOptions);
            smallCircle = new google.maps.Circle(smallOptions);


            startAnimateCircles();


        }



        var smallRadius = 1;
        var mediumRadius = 1;
        var largeRadius = 1;
        var smallTime = 0;
        var mediumTime = 0;
        var largeTime = 0;

        var largeCircleInterval;
        var mediumCircleInterval;
        var smallCircleInterval;




        function smallCircleAnimation() {

            if ((smallRadius < smallCircleRadius)) {
                smallRadius =  -(1-(Math.pow((1-smallTime), 2)));
                smallCircle.setRadius(smallRadius);
            }
            else{
                clearInterval(smallCircleAnimation);
            }
            smallTime = smallTime += 5;
        }

        function medCircleAnimation() {

            if ((mediumRadius < medCircleRadius)) {
                mediumRadius =  -(1-(Math.pow((1-mediumTime), 2)));
                medCircle.setRadius(mediumRadius);
            }
            else{
                clearInterval(medCircleAnimation);
            }
            mediumTime = mediumTime += 3;
        }

        function largeCircleAnimation() {
            if ((largeRadius < largeCircleRadius)) {
                largeRadius =  -(1-(Math.pow((1-largeTime), 2)));
                largeCircle.setRadius(largeRadius);
            }
            else{
                clearInterval(largeCircleInterval);
            }
            largeTime = largeTime += 1;

        }




        function startAnimateCircles(){
            smallRadius = 1;
            mediumRadius = 1;
            largeRadius = 1;
            smallTime = 0;
            mediumTime = 0;
            largeTime = 0;

            largeCircleInterval = setInterval(largeCircleAnimation, 5);
            mediumCircleInterval = setInterval(medCircleAnimation, 3);
            smallCircleInterval = setInterval(smallCircleAnimation, 1);
        }




        function toggleMusic(){
            //console.log("toggle music:"+playSound);
            if(playSound){
                daySound.pause();
                nightSound.pause();
                playSound = false;
            }else{
                daySound.play();
                nightSound.play()
                playSound = true;
            }
        }


        function handleNoGeolocation(errorFlag) {
            if (errorFlag) {
                var content = 'Error: The Geolocation service failed.';
            } else {
                var content = 'Error: Your browser doesn\'t support geolocation.';
            }

            var options = {
                map: map,
                position: new google.maps.LatLng(60, 105),
                content: content
            };

            var infowindow = new google.maps.InfoWindow(options);
            map.setCenter(options.position);
        }

        function moveMap(xChange, yChange) {
                map.panBy(xChange, yChange);
            }
            function setZoom(z) {
                map.setZoom(map.getZoom() - z);
            }

            var mapMoveUpdate = function() { 
                var sMapType = map.getMapTypeId();
                
                for(var i = 0; i < markers.length; i++) {
                    markers[i].setMap(null);
                }
                if(sMapType == "roadmap") { //daytime
                    
                    var dayRequest = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['grocery_or_supermarket']
                    };
                    var nearestMall = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['shopping_mall']
                    };
                    var nearestGym = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['gym']
                    };

                    service.nearbySearch(dayRequest, function (results, status) {
                        daySound.volume(0.05 * results.length);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {
                            markers = [];
                            for (var i = 0; i < results.length; i++) {
                                var mark = results[i];
                                var place = new google.maps.LatLng(mark.geometry.location.A,mark.geometry.location.F);
                                var marked = new google.maps.Marker({
                                    position: place/*,
                                    icon: barIcon*/
                                });
                                marked.setMap(map);
                                markers.push(marked);
                            }
                        }
                    });
                }
                else { //nighttime
                    
                    var nightRequest = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['bar', 'night_club']
                    };
                    var alcRequest = {
                        location: map.getCenter(),
                        radius: 500,
                        types: ['liquor_store']
                    };
                    service.nearbySearch(nightRequest, function (results, status) {
                        nightSound.volume(0.05 * results.length);
                        if (status == google.maps.places.PlacesServiceStatus.OK) {
                            markers = [];
                            for (var i = 0; i < results.length; i++) {
                                var mark = results[i];
                                var place = new google.maps.LatLng(mark.geometry.location.A,mark.geometry.location.F);
                                var marked = new google.maps.Marker({
                                    position: place,
                                    icon: barIcon
                                });
                                marked.setMap(map);
                                markers.push(marked);
                            }
                          }
                    });
                }
            }


    </script>
    <style type="text/css">
        html, body {
            margin-left: 0px;
            margin-right: 0px;
            margin-top:0px;
            height: 100%;
            width: 100%;
        }
    </style>
</head>

<body>

<!--
<div id="locationField">
    <input id="autocomplete" placeholder="Enter your address"
           onFocus="geolocate()" type="text"/>
</div>
-->
<div id="mapContainer">
<div id="circle"></div>
<div id="googleMap" style="width:100%;height:100%">
</div>
</div>

<style type="text/css">
    #mapContainer {
        position: relative;
        height: 100%;
    }
    #googleMap {
        margin-top: 80px;
        margin-bottom: 40px;
        position: relative;

    }
    #circle {
                height: 20px;
                width: 20px;
                border-radius: 100%;
                /*border: 2px solid black;*/
                background-color: white;
                position: absolute;
                left: 0px;
                z-index: 100;
            }

</style>

<button onclick="callDatabase()">Delphi</button>
<button onclick="toggleBoundingCircle()">Toggle circle bound</button>
<button onclick="getZillowComps(16834453)">Get Comps</button>


<!-- About Section -->
<section id="about">
    <div class="container">
        <div class="row">
            <div class="col-lg-12 text-center">
                <h2 class="section-heading">More Info</h2>
                <h3 class="section-subheading text-muted">See what's going on in San Diego</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <ul class="timeline">
                    <li>
                        <div id="traffic_chart"></div>
                        <div class="timeline-image">
                            <img class="img-circle img-responsive" src="img/about/1.jpg" alt="">
                        </div>
                        <div class="timeline-panel">
                            <div class="timeline-heading">
                                <h4>Daytime</h4>
                                <h4 class="subheading">The busy city</h4>
                            </div>
                            <div class="timeline-body">
                                <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p>
                            </div>
                        </div>
                    </li>


                    <li class="timeline-inverted">
                        <div id="marital_chart"></div>
                        <div class="timeline-image">
                            <img class="img-circle img-responsive" src="img/about/4.jpg" alt="">
                        </div>
                        <div class="timeline-panel">
                            <div class="timeline-heading">
                                <h4>Nightlife</h4>
                                <h4 class="subheading">The happy hours</h4>
                            </div>
                            <div class="timeline-body">

                                <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p>
                            </div>
                        </div>
                    </li>
                    <li class="timeline-inverted">
                        <div class="timeline-image">
                            <h4>Be Part
                                <br>Of Our
                                <br>Story!</h4>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>

<footer>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <span class="copyright">Copyright &copy; Bachelor's Pad</span>
            </div>
            <div class="col-md-4">
                <ul class="list-inline social-buttons">
                    <li><a href="#"><i class="fa fa-twitter"></i></a>
                    </li>
                    <li><a href="#"><i class="fa fa-facebook"></i></a>
                    </li>
                    <li><a href="#"><i class="fa fa-linkedin"></i></a>
                    </li>
                </ul>
            </div>
            <div class="col-md-4">
                <ul class="list-inline quicklinks">
                    <li><a href="#">Designed by Shuangli Zhou</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</footer>


<script>
    var circle = document.getElementById('circle');
        var x = 0;
        var y = 0;
        var z = 0;
        var zoom = false;
        var lastZoom = 0;
        Leap.loop(function (frame) {
            frame.hands.forEach(function(hand, index) {
                var pos = hand.screenPosition();
                var grab = hand.grabStrength.toPrecision(2) > 0.9 ? true : false;
                //output.innerHTML = 'X:' + Math.floor(pos[0]) + ' Y:' + Math.floor(pos[1]) + ' Z:' + Math.floor(pos[2]) + ' Grab:' + grab;
                circle.style.left = Math.floor(pos[0]) + 'px';
                    circle.style.top = Math.floor(pos[1]) + 'px';
                    circle.style.width = (Math.floor(pos[2] / 3) + 100) + 'px';
                    circle.style.height = (Math.floor(pos[2] / 3) + 100) + 'px';
                    circle.style.marginLeft = "-" + Math.floor(pos[1] / 2) + "px";
                    circle.style.marginTop = "-" + Math.floor(pos[1] / 2) + "px";
                    circle.style.opacity = hand.confidence;
                if(grab && hand.confidence > 0.3) {
                    moveMap((x - Math.floor(pos[0])), (y - Math.floor(pos[1])));
                    //out2.innerHTML = (z - Math.floor(pos[2]));
                    if(!zoom && ((new Date()) - lastZoom) > 1500) {
                        zoom = true;
                        lastZoom = new Date();
                        //z = (z - Math.floor(pos[2]));
                        z = Math.floor(pos[2]);
                    }
                    
                    x = Math.floor(pos[0]);
                    y = Math.floor(pos[1]);
                    //z = Math.floor(pos[2]);
                }
                else {
                    if(zoom) {
                        zoom = false;
                        z = (z - Math.floor(pos[2]));
                        //mapMoveUpdate();
                        lastZoom = new Date();
                        // console.log(z + " -> " + Math.floor(z / 200));
                        setZoom(Math.floor(z / 200));
                    }
                    x = Math.floor(pos[0]);
                    y = Math.floor(pos[1]);
                    z = Math.floor(pos[2]);
                }
                if(hand.confidence > 0.6 && frame.fingers[0].extended && frame.fingers[4].extended && !frame.fingers[1].extended && !frame.fingers[2].extended && !frame.fingers[3].extended && map.getMapTypeId() == "roadmap") {
                    map.setMapTypeId('nightmode');
                }
                else if(hand.confidence > 0.6 && !frame.fingers[0].extended && frame.fingers[4].extended && !frame.fingers[1].extended && frame.fingers[2].extended && frame.fingers[3].extended && map.getMapTypeId() != "roadmap") {
                    map.setMapTypeId('roadmap');
                }

                //map.setZoom(/* 0-21 depending on Z from handPos*/);
            });
        }).use('screenPosition', {scale: 0.45});

    var chart = c3.generate({
        bindto: '#traffic_chart',
        data: {
            columns: [
                ['data1', 30, 200, 100, 400, 150, 250],
                ['data2', 130, 100, 140, 200, 150, 50]
            ],
            type: 'spline'
        }
    });



/* //TODO traffic stats
    $.ajax({
        type: "GET",
        url: '/readTrafficStatus',
        success: function(result) {

            var test = [50, 20, 10, 40, 15, 2555];
            console.log("marital result: "+JSON.stringify(result.data[0]));
            console.log("marital result: "+JSON.stringify(result.data[0][11]));

            var locations = result.data.map(function (item) {
                return item[9];
            });

            var totalPopulation = result.data.map(function (item) {
                return item[11];
            });

            var singleStats = result.data.map(function (item) {
                return item[12];
            });

            var marriedStats = result.data.map(function (item) {
                return item[13];
            });

            var separatedStats = result.data.map(function (item) {
                return item[14];
            });

            var widowedStats = result.data.map(function (item) {
                return item[15];
            });

            var divorcedStats = result.data.map(function (item) {
                return item[16];
            });


            var chart = c3.generate({
                bindto: '#marital_chart',
                data: {
                    x : 'x',
                    json: {
                        x : locations,
                        Single: singleStats,
                        Married: marriedStats,
                        Separated: separatedStats,
                        Widowed: widowedStats,
                        Divorced: divorcedStats
                    },
                    groups: [
                        ['Single', 'Widowed']
                    ],
                    types: {
                        Single: 'area-spline',
                        Married: 'bar'
                    }
                },
                axis: {
                    x: {
                        type: 'category',
                        tick: {
                            rotate: 75,
                            multiline: false
                        },
                        height: 100
                    }
                }
            });



        },
        error: function(jqXHR, textstatus, errorThrown) {
            //alert('text status ' + textstatus + ', err ' + errorThrown);
            console.log("call error: ")

        }
    });
*/


    //  totalPop, single, married, separated, widowed, divorced

    $.ajax({
        type: "GET",
        url: '/readMaritalStatus',
        success: function(result) {

            console.log("marital result: "+JSON.stringify(result.data[0]));
            console.log("marital result: "+JSON.stringify(result.data[0][11]));

            var locations = result.data.map(function (item) {
                return item[9];
            });

            var totalPopulation = result.data.map(function (item) {
                return item[11];
            });

            var singleStats = result.data.map(function (item) {
                return item[12];
            });

            var marriedStats = result.data.map(function (item) {
                return item[13];
            });

            var separatedStats = result.data.map(function (item) {
                return item[14];
            });

            var widowedStats = result.data.map(function (item) {
                return item[15];
            });

            var divorcedStats = result.data.map(function (item) {
                return item[16];
            });


            var chart = c3.generate({
                bindto: '#marital_chart',
                data: {
                    x : 'x',
                    json: {
                        x : locations,
                        Single: singleStats,
                        Married: marriedStats,
                        Separated: separatedStats,
                        Widowed: widowedStats,
                        Divorced: divorcedStats
                    },
                    groups: [
                        ['Single', 'Widowed']
                    ],
                    types: {
                        Single: 'area-spline',
                        Married: 'bar'
                    }
                },
                axis: {
                    x: {
                        type: 'category',
                        tick: {
                            rotate: 75,
                            multiline: false
                        },
                        height: 100
                    }
                }
            });



        },
        error: function(jqXHR, textstatus, errorThrown) {
            //alert('text status ' + textstatus + ', err ' + errorThrown);
            console.log("call error: ")


        }
    });



</script>
</body>
</html>